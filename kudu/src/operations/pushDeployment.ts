/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/pushDeploymentMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a PushDeployment. */
export class PushDeployment {
  private readonly client: KuduClientContext;

  /**
   * Create a PushDeployment.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param file
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  zipPushDeploy(file: msRest.HttpRequestBody, options?: Models.PushDeploymentZipPushDeployOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param file
   * @param callback The callback
   */
  zipPushDeploy(file: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param file
   * @param options The optional parameters
   * @param callback The callback
   */
  zipPushDeploy(file: msRest.HttpRequestBody, options: Models.PushDeploymentZipPushDeployOptionalParams, callback: msRest.ServiceCallback<void>): void;
  zipPushDeploy(file: msRest.HttpRequestBody, options?: Models.PushDeploymentZipPushDeployOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        file,
        options
      },
      zipPushDeployOperationSpec,
      callback);
  }

  /**
   * @param file
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  warPushDeploy(file: msRest.HttpRequestBody, options?: Models.PushDeploymentWarPushDeployOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param file
   * @param callback The callback
   */
  warPushDeploy(file: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param file
   * @param options The optional parameters
   * @param callback The callback
   */
  warPushDeploy(file: msRest.HttpRequestBody, options: Models.PushDeploymentWarPushDeployOptionalParams, callback: msRest.ServiceCallback<void>): void;
  warPushDeploy(file: msRest.HttpRequestBody, options?: Models.PushDeploymentWarPushDeployOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        file,
        options
      },
      warPushDeployOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const zipPushDeployOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/zipdeploy",
  queryParameters: [
    Parameters.isAsync,
    Parameters.author,
    Parameters.authorEmail,
    Parameters.deployer,
    Parameters.message,
    Parameters.trackDeploymentId
  ],
  requestBody: {
    parameterPath: "file",
    mapper: {
      required: true,
      serializedName: "file",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {},
    202: {},
    default: {}
  },
  serializer
};

const warPushDeployOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/wardeploy",
  queryParameters: [
    Parameters.isAsync,
    Parameters.author,
    Parameters.authorEmail,
    Parameters.deployer,
    Parameters.message
  ],
  requestBody: {
    parameterPath: "file",
    mapper: {
      required: true,
      serializedName: "file",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {},
    202: {},
    default: {}
  },
  serializer
};
