steps:
- bash: |
    CHANGES=$(git remote set-branches --add origin main && git fetch && git --no-pager diff --name-only origin/main...HEAD)
    if [ -z "$(grep "${{ parameters.package }}/" <<< "$CHANGES")" ]; then
      echo "##vso[task.setvariable variable=skipPackage]1"
      echo "Skipping package"
    else
      echo "##vso[task.setvariable variable=skipPackage]"
      echo "Not skipping package"
    fi
  displayName: '${{ parameters.package }}: check if package has changed'
  condition: ne(variables['Build.SourceBranchName'], 'main')

- task: Npm@1
  displayName: '${{ parameters.package }}: npm ci'
  inputs:
    command: ci
    workingDir: '${{ parameters.package }}'
  condition: not(variables['skipPackage'])

- task: Npm@1
  displayName: '${{ parameters.package }}: build'
  inputs:
    workingDir: '${{ parameters.package }}'
    command: custom
    customCommand: run build
  condition: not(variables['skipPackage'])

- task: Npm@1
  displayName: '${{ parameters.package }}: lint'
  inputs:
    workingDir: '${{ parameters.package }}'
    command: custom
    customCommand: run lint
  condition: not(variables['skipPackage'])

- task: Npm@1
  displayName: '${{ parameters.package }}: pack'
  inputs:
    workingDir: '${{ parameters.package }}'
    command: custom
    customCommand: pack
  condition: and(not(variables['skipPackage']), eq(variables['Agent.OS'], 'Linux'), ne(variables['System.PullRequest.IsFork'], 'True'))

- task: CopyFiles@2
  displayName: '${{ parameters.package }}: copy package'
  inputs:
    Contents: '${{ parameters.package }}/vscode-*.tgz'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: and(not(variables['skipPackage']), eq(variables['Agent.OS'], 'Linux'), ne(variables['System.PullRequest.IsFork'], 'True'))

- task: PublishBuildArtifacts@1
  displayName: '${{ parameters.package }}: publish package'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/${{ parameters.package }}'
    ArtifactName: '${{ parameters.package }}'
  condition: and(not(variables['skipPackage']), eq(variables['Agent.OS'], 'Linux'), ne(variables['System.PullRequest.IsFork'], 'True'))

- task: Npm@1
  displayName: '${{ parameters.package }}: test'
  inputs:
    workingDir: '${{ parameters.package }}'
    command: custom
    customCommand: test
  env:
    SERVICE_PRINCIPAL_CLIENT_ID: $(SERVICE_PRINCIPAL_CLIENT_ID)
    SERVICE_PRINCIPAL_SECRET: $(SERVICE_PRINCIPAL_SECRET)
    SERVICE_PRINCIPAL_DOMAIN: $(SERVICE_PRINCIPAL_DOMAIN)
    DISPLAY: :10 # Only necessary for linux tests
  condition: not(variables['skipPackage'])

- task: PublishTestResults@2
  displayName: '${{ parameters.package }}: publish test results'
  inputs:
    testResultsFiles: '${{ parameters.package }}/*-results.xml'
    testRunTitle: '$(Agent.OS) ${{ parameters.package }}'
  condition: succeededOrFailed()

- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
  displayName: "SBoM Generation Task"
  env:
    DeleteManifestDirIfPresent: true
  inputs:
    BuildDropPath: "$(Build.ArtifactStagingDirectory)"
  condition: and(eq(variables['Agent.OS'], 'Linux'), ne(variables['System.PullRequest.IsFork'], 'True'))

- task: PublishBuildArtifacts@1
  displayName: "Publish artifacts: sbom"
  inputs:
    PathtoPublish: "$(Build.ArtifactStagingDirectory)/_manifest"
    ArtifactName: "${{ parameters.package }}_manifest"
  condition: and(eq(variables['Agent.OS'], 'Linux'), ne(variables['System.PullRequest.IsFork'], 'True'))
