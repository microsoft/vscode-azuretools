parameters:
  - name: enableSigning
    type: boolean
    default: True
  - name: vsixFileNames
    type: object
    default: ['']

steps:
  # Check if the SignExtension.signproj file exists and set a variable using PowerShell
  # All other steps in this template will only run if the file exists
  - powershell: |
      $fileExists = Test-Path -Path "$(Build.SourcesDirectory)/.azure-pipelines/SignExtension.signproj"
      Write-Output "##vso[task.setvariable variable=signprojExists]$fileExists"

      if ($fileExists) {
          Write-Output "SignExtension.signproj file found. Signing extension."
      } else {
          Write-Output "SignExtension.signproj file not found. Skipping signing."
      }
    displayName: "\U0001F449 Check for SignExtension.signproj File"
    condition: ${{ parameters.enableSigning }}

  # put the extension name and version from the package.json into variables to use later. Variables can be used in later steps as $(package.name) and $(package.version)
  - pwsh: |
      Write-Output "##vso[task.setvariable variable=name;isOutput=true]$((Get-Content -Raw -Path package.json | ConvertFrom-Json).name)"
      Write-Output "##vso[task.setvariable variable=version;isOutput=true]$((Get-Content -Raw -Path package.json | ConvertFrom-Json).version)"
    condition: eq(variables['signprojExists'], True)
    name: package
    displayName: "\U0001F449 Get extension info from package.json"

  # run this script if vsixFileName is not set
  - script: npx @vscode/vsce@latest generate-manifest -i $(package.name)-$(package.version).vsix -o $(Build.SourcesDirectory)/extension.manifest
    condition: and(eq(variables['signprojExists'], True), eq('${{ parameters.vsixFileName }}', ''))
    displayName: "\U0001F449 Generate extension manifest"


  # run this script if vsixFileName is set
  - ${{ each vsixFileName in parameters.vsixFileNames }}:
    - script: npx @vscode/vsce@latest generate-manifest -i $vsixFileName-$(package.version).vsix -o $(Build.SourcesDirectory)/extension.manifest
      condition: and(eq(variables['signprojExists'], True), ne('$vsixFileName', ''))
      displayName: "\U0001F449 Generate extension manifest"

    # this task will pass even if signing fails, so we follow it up with a check to see if the signature file was created
    - task: DotNetCoreCLI@2
      condition: eq(variables['signprojExists'], True)
      displayName: "\U0001F449 Sign with MSBuild"
      inputs:
        command: 'build'
        projects: $(Build.SourcesDirectory)/.azure-pipelines/SignExtension.signproj

    - pwsh: |
        $filePath = "extension.signature.p7s"

        if (-Not (Test-Path $filePath)) {
            Write-Error "The file '$filePath' does not exist."
            exit 1
        }

        Write-Output "The file '$filePath' exists."
        exit 0
      displayName: "\U0001F449 Verify extension.signature.p7s file was created"
      condition: eq(variables['signprojExists'], True)

    - pwsh: |
        $targetDir = "$vsixFileName"
        New-Item -ItemType Directory -Force -Path $targetDir
        Move-Item -Path "extension.signature.p7s" -Destination "$targetDir/extension.signature.p7s" -Force
        Move-Item -Path "extension.manifest" -Destination "$targetDir/extension.manifest" -Force
        Write-Output "Moved signature files to $targetDir directory"
      displayName: "\U0001F449 Move signature files to $vsixFileName directory"
      condition: eq(variables['signprojExists'], True)


